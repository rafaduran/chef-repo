# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

begin
  LOCALCONFIG = YAML.load_file('localconfig.yaml')
rescue Errno::ENOENT
  LOCALCONFIG = {}
end

BASEDIR        = '..'
COOKBOOKS_PATH = ENV['VAGRANT_COOKBOOKS_PATH'] ||
                 ["#{BASEDIR}/cookbooks", "#{BASEDIR}/site-cookbooks"]
ROLES_PATH     = ENV['VAGRANT_ROLES_PATH'] || "#{BASEDIR}/roles"
DATABAGS_PATH  = ENV['VAGRANT_DATABAGS_PATH'] || "#{BASEDIR}/data_bags"
BOXES = {
  :ubuntu => {
    :name => 'precise64',
    :url  => 'http://files.vagrantup.com/precise64.box',
  },
  # Chef 0.10.8
  :debian => {
    :name => 'squeeze64',
    :url  => 'http://dl.dropbox.com/u/937870/VMs/squeeze64.box',
  },
  :centos => {
    :name => 'centos-5.7-x86_64',
    :url  => 'http://dl.dropbox.com/u/8072848/centos-5.7-x86_64.box',
  },
  # No Chef
  :openbsd => {
    :name => 'openbsd50-i386',
    :url  => 'https://s3-eu-west-1.amazonaws.com/rosstimson-vagrant-boxes/openbsd50-i386.box',
  },
  # No chef
  :archlinux=> {
    :name => 'archlinux',
    :url  => 'http://vagrant.pouss.in/archlinux_2012-07-02.box',
  },
}

Vagrant::Config.run do |config|

  config.vm.define :umongodb do |ubuntu_mongodb|
    # BOX settings
    ubuntu_mongodb.vm.box     = BOXES[:ubuntu][:name]
    ubuntu_mongodb.vm.box_url = BOXES[:ubuntu][:url]

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    # Networking settings
    ubuntu_mongodb.vm.network :hostonly, "192.168.33.10"
    # Forwrdring MongoDB port
    ubuntu_mongodb.vm.forward_port 27017, 27017

    ubuntu_mongodb.vm.provision :shell, :path => "scripts/vagrant.sh"

    ubuntu_mongodb.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = COOKBOOKS_PATH
      chef.roles_path = ROLES_PATH
      chef.data_bags_path = DATABAGS_PATH
      chef.add_recipe "minitest-handler"
      chef.add_role "mongodb"
    end
  end

  config.vm.define :dmongodb do |debian_mongodb|
    # BOX settings
    debian_mongodb.vm.box     = BOXES[:debian][:name]
    debian_mongodb.vm.box_url = BOXES[:debian][:url]

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    # Networking settings
    debian_mongodb.vm.network :hostonly, "192.168.33.11"

    debian_mongodb.vm.provision :shell, :path => "scripts/vagrant.sh"

    debian_mongodb.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = COOKBOOKS_PATH
      chef.roles_path = ROLES_PATH
      chef.data_bags_path = DATABAGS_PATH
      chef.add_recipe "minitest-handler"
      chef.add_role "mongodb"
      chef.json = { :mongodb => { :bind_ip => '127.0.0.1' }}
    end
  end

  config.vm.define :cmongodb do |centos|
    # It suppose to be a MongoDB VM, but MongoDB cookbook doesn't work properly
    # yet on CentOS.

    # BOX settings
    centos.vm.box     = BOXES[:centos][:name]
    centos.vm.box_url = BOXES[:centos][:url]

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    centos.vm.provision :shell, :path => "scripts/vagrant.sh"

    centos.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = COOKBOOKS_PATH
      chef.roles_path = ROLES_PATH
      chef.data_bags_path = DATABAGS_PATH
      chef.add_recipe "minitest-handler"
    end
  end

  config.vm.define :uslanger do |ubuntu_slanger|
    # Local config
    config = LOCALCONFIG['uslanger'] || {}
    # BOX settings
    ubuntu_slanger.vm.box     = BOXES[:ubuntu][:name]
    ubuntu_slanger.vm.box_url = BOXES[:ubuntu][:url]

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    # Networking settings
    # DHCP ensures 08:00:27:8a:54:74 => 192.168.1.50
    ubuntu_slanger.vm.network :bridged, config['network']
    # Forwrdring slanger push port
    ubuntu_slanger.vm.forward_port 4567, 4567

    ubuntu_slanger.vm.provision :shell, :path => 'scripts/vagrant.sh'

    ubuntu_slanger.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = COOKBOOKS_PATH
      chef.roles_path = ROLES_PATH
      chef.data_bags_path = DATABAGS_PATH
      chef.add_recipe 'minitest-handler'
      chef.add_role 'slanger'
      if config['node']
        chef.json = config['node']
      end
    end
  end

# Commented out boxes doesn't work as expected
#  config.vm.define :openbsd do |openbsd|
#    # BOX settings
#    openbsd.vm.box     = BOXES[:openbsd][:name]
#    openbsd.vm.box_url = BOXES[:openbsd][:url]
#
#    # Boot with a GUI so you can see the screen. (Default is headless)
#    # openbsd.vm.boot_mode = :gui
#
#    openbsd.vm.provision :chef_solo do |chef|
#      chef.cookbooks_path = COOKBOOKS_PATH
#      chef.roles_path = ROLES_PATH
#      chef.data_bags_path = DATABAGS_PATH
#      chef.add_recipe "enviro"
#    end
#  end

#  config.vm.define :archlinux do |archlinux|
#    # BOX settings
#    archlinux.vm.box     = BOXES[:archlinux][:name]
#    archlinux.vm.box_url = BOXES[:archlinux][:url]
#
#    # Boot with a GUI so you can see the screen. (Default is headless)
#    # archlinux.vm.boot_mode = :gui
#
#    archlinux.vm.provision :chef_solo do |chef|
#      chef.cookbooks_path = COOKBOOKS_PATH
#      chef.roles_path = ROLES_PATH
#      chef.data_bags_path = DATABAGS_PATH
#      chef.add_recipe "enviro"
#    end
#  end

end
